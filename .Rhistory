blogdown:::serve_site()
render_site()
library(rmarkdown)
render_site()
library(cars)
data(cars)
data(cars)
head(cars)
plot(speed, dist, data = cars)
plot(speed, dist, data = cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, pch = 19)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
rw = randomWalk()
randomWalk = function(numSteps = 100, prob = 0.5, init = 0){
walk = rep(NA, numSteps)
walk[1] = init
for(i in 1:(numSteps-1) ){
Z = rbinom(1,1, prob)
walk[i+1] = walk[i] + ifelse(Z == 1, 1, -1)
}
return(walk)
}
rw = randomWalk()
head(rw)
randomWalk = function(numSteps = 100, prob = 0.15, init = 0){
walk = rep(NA, numSteps)
walk[1] = init
for(i in 1:(numSteps-1) ){
Z = rbinom(1,1, prob)
walk[i+1] = walk[i] + ifelse(Z == 1, 1, -1)
}
return(walk)
}
limit = 25
plot(randomWalk(), type = "l", ylim = c(-limit,limit), col = "orange")
for(i in 1:10){
color = sample(rainbow(7), 1)
lines(randomWalk(), col = color)
}
plot(randomWalk(), type = "l", ylim = c(-limit,limit), col = "orange")
for(i in 1:10){
color = sample(rainbow(7), 1)
lines(randomWalk(), col = color)
}
limit = 50
plot(randomWalk(), type = "l", ylim = c(-limit,limit), col = "orange")
for(i in 1:10){
color = sample(rainbow(7), 1)
lines(randomWalk(), col = color)
}
walk.df = data.frame(path = walk, step = length(walk))
walk = randomWalk()
walk.df = data.frame(path = walk, step = length(walk))
ggplot(walk.df, aes(step, walk)) + geom_lines()
library(ggplot)
library(ggplot2)
ggplot(walk.df, aes(step, walk)) + geom_lines()
ggplot(walk.df, aes(step, walk)) + geom_line()
walk.df = data.frame(path = walk, step = 1:length(walk))
ggplot(walk.df, aes(step, walk)) + geom_line()
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_line()
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_line() +
labs(x = "Step", y = "Path")
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_point() +
labs(x = "Step", y = "Path")
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_line(lwd = 2) +
labs(x = "Step", y = "Path")
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
?mfpca.sc
library(refund)
render_site()
?mfpca.sc
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
render_site()
library(refund.shiny)
?plot_shiny
data(cd4)
SC = fpca.sc(cd4)
plot_shiny(SC)
library(refund)
data(cd4)
data(cd4)
SC = fpca.sc(cd4)
plot_shiny(SC)
render_site()
?render_site
library(devtools)
?render_site
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()]
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
72*30
72*30*.7
30*80
library(plotly)
shiny::runApp(system.file("examples", "plotlyEvents", package = "plotly"))
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
render_site()
messages
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
getwd()
setwd("..")
setwd("/Users/juliawrobel/Desktop/")
pwd
Rcpp::Rcpp.package.skeleton()
library(rmarkdown)
render_site()
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
getwd()
render_site()
render_site()
render_site()
render_site()
getwd()
list.files()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
clear
library(rmarkdown)
render_site()
render_site()
guess1 = c(63, 83, 100, 40)
mean(guess1)
guess2 = c(65, 77, 81, 72)
mean(guess2)
mean(guess1)
library(tidyverse)
library(refund)
library(mgcv)
load("Downloads/Example.RData")
rm(list = ls())
load("/Users/juliawrobel/Downloads/Example.RData")
head(ccmsdstmp)
dat = ccmh_sdstmp
head(dat)
names(dat)
dat %>%
ungroup()
dat %>%
ungroup() %>%
mutate(.obs = ID_new,.index = Seq_appointment,.value = CCAPS_51 + 1)
dat %>%
ungroup() %>%
mutate(.obs = ID_new,.index = Seq_appointment,.value = CCAPS_51 + 1) %>% # add 1 to match ocat coding
dplyr::select(.obs,.index,.value)
data <- dat %>%
group_by(ID_new) %>%
summarise(A = first(SDS_75_2weeks),
B = first(SDS_76_ind))
data$Y <- as.data.frame(ydata %>% spread(.index,.value))[,-1]
ydata <- dat %>%
ungroup() %>%
mutate(.obs = ID_new,.index = Seq_appointment,.value = CCAPS_51 + 1) %>% # add 1 to match ocat coding
dplyr::select(.obs,.index,.value)
data$Y <- as.data.frame(ydata %>% spread(.index,.value))[,-1]
data$Y
ydata
ydata %>% spread(.index,.value)
pffr_mod <- pffr(formula = Y ~ 1 +
A +
B +
s(ID_new,bs = "re"),
ydata = as.data.frame(ydata),
yind = seq(1,20,by = 1),
data = as.data.frame(data),
algorithm = "bam",
discrete = T,
family = ocat(R = 5),
bs.yindex = list(bs = "ps",k = 8,m = c(2,1)),
bs.int = list(bs = "ps",k = 10,m = c(2,1)))
??pffr
?pffr
?predict.gam
pffr_mod <- pffr(formula = Y ~ 1 +
A +
B +
s(ID_new,bs = "re"),
ydata = as.data.frame(ydata),
yind = seq(1,20,by = 1),
data = as.data.frame(data),
algorithm = "bam",
discrete = T,
family = ocat(R = 5),
bs.yindex = list(bs = "ps",k = 8,m = c(2,1)),
bs.int = list(bs = "ps",k = 10,m = c(2,1)))
summary(pffr_mod)
plot(pffr_mod,pages = 1)
newdata <- expand.grid(A = c(0,1),B = c(0,1))
pffr_pred <- predict(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pred_df <- data.frame(Prob = c(t(pffr_pred$fit)),
se = c(t(pffr_pred$se.fit)))
pred_df$upr <- pred_df$Prob + 1.96*pred_df$se
pred_df$lwr <- pred_df$Prob - 1.96*pred_df$se
pred_df$t <- rep(1:20,times = 4)
pred_df$Group <- factor(rep(1:4,each = 20))
ggplot(pred_df,aes(x = t,y = Prob)) +
geom_line(aes(color = Group)) +
geom_ribbon(aes(ymin = lwr,ymax = upr,color = Group),linetype = 1,alpha = 0.2)
identical(predict(pffr_mod,cbind(newdata,ID_new = 0),type = "link"),
predict(pffr_mod,cbind(newdata,ID_new = 0),type = "response"))
identical(predict(pffr_mod,cbind(newdata,ID_new = 0),type = "terms"),
predict(pffr_mod,cbind(newdata,ID_new = 0),type = "response"))
predict(pffr_mod,cbind(newdata,ID_new = 0),type = "terms")
summary(pffr_mod)
summary(data)
summary(pffr_mod)
plot(pffr_mod,pages = 1)
newdata <- expand.grid(A = c(0,1),B = c(0,1))
pffr_pred <- predict(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pred_df <- data.frame(Prob = c(t(pffr_pred$fit)),
se = c(t(pffr_pred$se.fit)))
pred_df$upr <- pred_df$Prob + 1.96*pred_df$se
pred_df$lwr <- pred_df$Prob - 1.96*pred_df$se
pred_df$t <- rep(1:20,times = 4)
pred_df$Group <- factor(rep(1:4,each = 20))
ggplot(pred_df,aes(x = t,y = Prob)) +
geom_line(aes(color = Group)) +
geom_ribbon(aes(ymin = lwr,ymax = upr,color = Group),linetype = 1,alpha = 0.2)
newdata
str(Y)
str(data$Y)
class(pffr_mod)
identical(predict.bam(pffr_mod,cbind(newdata,ID_new = 0),type = "link"),
predict.gam(pffr_mod,cbind(newdata,ID_new = 0),type = "response"))
identical(predict.bam(pffr_mod,cbind(newdata,ID_new = 0),type = "link"),
predict(pffr_mod,cbind(newdata,ID_new = 0),type = "response"))
pffr_pred <- predict.gam(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict.bam(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict.lm(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict.glm(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict.pffr(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict.pffr(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
pffr_pred <- predict.gam(pffr_mod,cbind(newdata,ID_new = 0),type = "response",se.fit = T) ### Negative predicted probabilities??? ###
class(pffr_mod)
?predict.gam
clas(pffr_pred)
class(pffr_pred)
attributes(pffr_pred)
?predict.glm
?predict.bam
