blogdown:::serve_site()
render_site()
library(rmarkdown)
render_site()
library(cars)
data(cars)
data(cars)
head(cars)
plot(speed, dist, data = cars)
plot(speed, dist, data = cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, pch = 19)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
rw = randomWalk()
randomWalk = function(numSteps = 100, prob = 0.5, init = 0){
walk = rep(NA, numSteps)
walk[1] = init
for(i in 1:(numSteps-1) ){
Z = rbinom(1,1, prob)
walk[i+1] = walk[i] + ifelse(Z == 1, 1, -1)
}
return(walk)
}
rw = randomWalk()
head(rw)
randomWalk = function(numSteps = 100, prob = 0.15, init = 0){
walk = rep(NA, numSteps)
walk[1] = init
for(i in 1:(numSteps-1) ){
Z = rbinom(1,1, prob)
walk[i+1] = walk[i] + ifelse(Z == 1, 1, -1)
}
return(walk)
}
limit = 25
plot(randomWalk(), type = "l", ylim = c(-limit,limit), col = "orange")
for(i in 1:10){
color = sample(rainbow(7), 1)
lines(randomWalk(), col = color)
}
plot(randomWalk(), type = "l", ylim = c(-limit,limit), col = "orange")
for(i in 1:10){
color = sample(rainbow(7), 1)
lines(randomWalk(), col = color)
}
limit = 50
plot(randomWalk(), type = "l", ylim = c(-limit,limit), col = "orange")
for(i in 1:10){
color = sample(rainbow(7), 1)
lines(randomWalk(), col = color)
}
walk.df = data.frame(path = walk, step = length(walk))
walk = randomWalk()
walk.df = data.frame(path = walk, step = length(walk))
ggplot(walk.df, aes(step, walk)) + geom_lines()
library(ggplot)
library(ggplot2)
ggplot(walk.df, aes(step, walk)) + geom_lines()
ggplot(walk.df, aes(step, walk)) + geom_line()
walk.df = data.frame(path = walk, step = 1:length(walk))
ggplot(walk.df, aes(step, walk)) + geom_line()
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_line()
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_line() +
labs(x = "Step", y = "Path")
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_point() +
labs(x = "Step", y = "Path")
ggplot(walk.df, aes(step, walk)) + theme_bw() + geom_line(lwd = 2) +
labs(x = "Step", y = "Path")
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
?mfpca.sc
library(refund)
render_site()
?mfpca.sc
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
render_site()
library(refund.shiny)
?plot_shiny
data(cd4)
SC = fpca.sc(cd4)
plot_shiny(SC)
library(refund)
data(cd4)
data(cd4)
SC = fpca.sc(cd4)
plot_shiny(SC)
render_site()
?render_site
library(devtools)
?render_site
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()]
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
72*30
72*30*.7
30*80
library(plotly)
shiny::runApp(system.file("examples", "plotlyEvents", package = "plotly"))
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
render_site()
messages
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
render_site()
library(rmarkdown)
render_site()
